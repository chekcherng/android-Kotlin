package com.example.scrolling

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Surface

import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            App()
        }
    }
}

//SHAPE ROW START
@Preview(showSystemUi = true)
@Composable
fun App() {
    Box(
        modifier = Modifier
            .background(Color.Black)
            .fillMaxSize(),
        contentAlignment = Alignment.TopCenter
    ) {
        composeMainList()
    }
}

@Composable
fun composeMainList(){
    Column (
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
        ){
        composeStory()
        composePostColumn()
        composeStory()
        composePostColumn()
    }
}

val movieList = listOf<String>(
    "https://www.themoviedb.org/t/p/original/iiZZdoQBEYBv6id8su7ImL0oCbD.jpg",
    "https://www.themoviedb.org/t/p/original/1hRoyzDtpgMU7Dz4JF22RANzQO7.jpg",
    "https://www.themoviedb.org/t/p/original/q6725aR8Zs4IwGMXzZT8aC8lh41.jpg",
    "https://www.themoviedb.org/t/p/original/78lPtwv72eTNqFW9COBYI0dWDJa.jpg",
    "https://www.themoviedb.org/t/p/original/6iUNJZymJBMXXriQyFZfLAKnjO6.jpg",
    "https://www.themoviedb.org/t/p/original/uxzzxijgPIY7slzFvMotPv8wjKA.jpg",
//    "https://www.themoviedb.org/t/p/original/qbUmbVOVVjCGQbSKpsFV5tmZjX6.jpg",
)

@Composable
fun composeStory(){
    Row(
      modifier = Modifier
//          .padding(5.dp)
//          .size(width = 180.dp, height = 300.dp)
          .height(300.dp)
          .fillMaxWidth()
          .horizontalScroll(rememberScrollState())
    ){
        repeat(movieList.size){
            // doj margin dael ចន្លោះរូបបេងរូប
            Box(modifier = Modifier
                .padding(5.dp)
                .size(width = 180.dp, height = 300.dp)
                .clip(RoundedCornerShape(20.dp)),
            ){
                AsyncImage(modifier = Modifier.fillMaxWidth(),
                    model = movieList[it],
                    contentDescription =null,
                    contentScale = ContentScale.Crop
                )
            }
        }
    }
}
@Composable
fun composePostColumn(){
    Column(
        modifier = Modifier
            .fillMaxWidth()
    ){
        repeat(movieList.size){
            // doj margin dael ចន្លោះរូបបេងរូប
            Box(modifier =
            Modifier
                .padding(5.dp)
                .height(600.dp)
                .fillMaxWidth()
                .clip(RoundedCornerShape(20.dp)),
            ){
                AsyncImage(modifier = Modifier.fillMaxWidth(),
                    model = movieList[it],
                    contentDescription =null,
                    contentScale = ContentScale.Crop
                )
            }
        }
    }
}
