package com.example.scrolling

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import coil.compose.AsyncImage

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            App()
        }
    }
}

@Preview(showSystemUi = true)
@Composable
fun App() {
    Box(
        modifier = Modifier
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(Color.DarkGray, Color.Gray),
                    startY = 900F,
                    endY = 10f
                )
            )
            .fillMaxSize(),
        contentAlignment = Alignment.TopCenter
    ) {
        ComposeMainList()
    }
}
@Composable
fun ComposeMainList(){
    Column (
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ){
        SectionTitle(title = "Food and Drink")
        SectionTitle(title = "Promotions")
        ComposeStory()

        SectionTitle(title = "Food ")
        ComposePostColumn()


    }
}

val PromotionList = listOf<String>(
    "https://i.pinimg.com/564x/e5/ab/b0/e5abb0e0ee1521948fcb151982bcbf79.jpg",
    "https://i.pinimg.com/736x/d3/74/ad/d374ad315de22a800401d6c75d14211b.jpg",
    "https://i.pinimg.com/564x/c7/94/a5/c794a5239267588d81cafdf0418d7fbf.jpg",
    "https://i.pinimg.com/564x/e5/ab/b0/e5abb0e0ee1521948fcb151982bcbf79.jpg",
    "https://i.pinimg.com/564x/32/52/03/325203f7a61d14f7f52689732541a4ab.jpg",

    )

@Composable
fun ComposeStory() {
    Row(
        modifier = Modifier
            .height(220.dp)
            .fillMaxWidth()
            .horizontalScroll(rememberScrollState())
    ) {
        repeat(PromotionList.size) { index ->
            Box(
                modifier = Modifier
                    .padding(6.dp)
                    .width(420.dp)

                    .fillMaxWidth(),
                contentAlignment = Alignment.BottomCenter
            ) {
                Column(
                    modifier = Modifier.fillMaxSize(),
                    verticalArrangement = Arrangement.Bottom,
                    horizontalAlignment = Alignment.CenterHorizontally
                )
                {
                    // Image
                    AsyncImage(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(300.dp)
                            .clip(RoundedCornerShape(20.dp)),
                        model = PromotionList[index],
                        contentDescription = null,
                        contentScale = ContentScale.Crop
                    )

                }

            }
        }
    }

}
@Composable
fun SectionTitle(title: String) {
    Text(
        text = title,
        color = Color.Black,
        fontSize = 20.sp,
        fontWeight = FontWeight.Bold,
        modifier = Modifier
            .padding(start = 8.dp, top = 8.dp, bottom = 8.dp)
            .wrapContentSize(Alignment.TopCenter)
    )
}


val FoodList = listOf<String>(
    "https://i.pinimg.com/564x/c4/af/40/c4af40c126cb2a716ee0d98cfe790c03.jpg",
    "https://i.pinimg.com/564x/fb/3b/d2/fb3bd2074b29176c0ee0e8f6de90eed6.jpg",
    "https://i.pinimg.com/736x/2b/af/e7/2bafe7a4421356aef1ef5a650ecc467f.jpg",
    "https://i.pinimg.com/564x/a5/bf/80/a5bf8097eab7b36351263a54f9505a20.jpg",
    "https://i.pinimg.com/564x/03/d4/51/03d451dc11a70fe728dbee782ff90858.jpg",
    "https://i.pinimg.com/564x/31/3b/0d/313b0dc5455e06e91cc76c3cc4e5b036.jpg",
    "https://i.pinimg.com/564x/d0/7e/2b/d07e2b86fa85753662eb7eab0875964e.jpg",
    "https://i.pinimg.com/564x/c5/e9/57/c5e95752138402ea236018327897085f.jpg",

    )
val FoodTexts = listOf(
    "KFC",
    "Burger King",
    "Pizza",
    "Milk Tea",
    "Donuts",
    "Starbucks",
    "Chicken Leg",
    "Rice Chicken"
)

@Composable
fun ComposePostColumn() {
    Column(
        modifier = Modifier.fillMaxWidth()
    ) {

        val numberOfRows = (FoodList.size + 1) / 2

        repeat(numberOfRows) { rowIndex ->
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                val startIndex = rowIndex * 2
                val endIndex = minOf(startIndex + 2, FoodList.size)

                for (i in startIndex until endIndex) {
                    Box(
                        modifier = Modifier
                            .padding(4.dp)
                            .weight(4f)
                            .clip(RoundedCornerShape(0.dp))
                    ) {
                        Column(
                            modifier = Modifier.fillMaxSize(),
                            verticalArrangement = Arrangement.Bottom,
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {

                            AsyncImage(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .size(220.dp),
                                model = FoodList[i],
                                contentDescription = null,
                                contentScale = ContentScale.Crop
                            )

                            Text(
                                text = FoodTexts[i],
                                color = Color.Black,
                                modifier = Modifier.padding(10.dp)
                            )
                        }
                    }
                }
            }
        }
    }
}

